This is gnuclad.info, produced by makeinfo version 4.13 from
gnuclad.texi.

INFO-DIR-SECTION Graphics
START-INFO-DIR-ENTRY
* gnuclad: (gnuclad).                cladogram generators
END-INFO-DIR-ENTRY

   This is a manual for gnuclad

   Copyright (C) 2010-2012 Donjan Rodic <donjan (at) dyx (dot) ch>

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.


File: gnuclad.info,  Node: Top,  Next: About,  Up: (dir)

gnuclad cladogram generator
***************************

This is the Texinfo manual for gnuclad HEAD (15 September 2012)

* Menu:

* About:: General information
* Usage:: Basics
* Usage Tips:: Good to know
* Config Options:: An overview
* FAQ:: Frequently Asked Questions
* Programming:: Contribute to the project

* Menu:

* GNU Free Documentation License::
* Index:: Anchor index


File: gnuclad.info,  Node: About,  Next: Usage,  Prev: Top,  Up: Top

1 About
*******

1.1 Contact
===========

The most recent version of gnuclad and it's documentation can be
downloaded at `https://launchpad.net/gnuclad'.

   You can also file bugs and contact the developers there.

1.2 Purpose
===========

gnuclad has been written to facilitate progress of the GNU/Linux distro
timeline project (GLDT).

   Meanwhile it has become quite customisable and general application -
for example in genealogy or visualisation of hierarchical structures -
should be possible.

1.3 Documentation
=================

The documentation is distributed together with gnuclad and can be found
in the 'doc' folder.

1.4 gnuclad usage
=================

GNU/Linux distro timeline: `http://futurist.se/gldt/'

   StÃ©phane List Development Timeline: `http://slist.lilotux.net/prog/'


File: gnuclad.info,  Node: Usage,  Next: Usage Tips,  Prev: About,  Up: Top

2 Usage
*******

2.1 Formats
===========

Supported input formats are: *CSV* spreadsheets, *directories*

   Supported output formats are: *CSV*, *SVG* and *CONF*

   A sample CSV file is distributed together with gnuclad.  It can be
openend with any spreadsheet program; the field separator is comma (,)
and the text delimiter is double quote ("). Please make sure you save
it that way.

   The conf file can be edited with any text editor of your choice.

2.2 Syntax
==========

     gnuclad INPUTFILE OUTPUT[FORMAT|FILE] [CONFIGFILE]

       example: gnuclad table.CSV SVG
       example: gnuclad Data.csv result.csv alternative.conf

2.3 Getting started
===================

gnuclad is built with the GNU toolchain.  These tools are included in
most GNU/Linux and BSD distributions and can be obtained from the Xcode
developer package on OSX.  On Windows, compilation works flawlessly
with MinGW & MSYS.  Other build systems may work but have not been
tested.

   To compile gnuclad, open the gnuclad main folder in a terminal and
type:
       sh configure
       make

   This will produce a 'gnuclad' binary in the 'src' folder.  Change to
the 'example' folder and generate your first SVG image:
       cd example
       ../src/gnuclad --help
       ../src/gnuclad example.csv svg example.conf

   In order to install gnuclad on a POSIX conform system, change back to
the main directory and run the install routine:
       cd ..
       make install

   You should now be able to call gnuclad from any folder.  If you wish
to uninstall gnuclad, simply open a terminal in that same main folder
and execute:
       make uninstall


File: gnuclad.info,  Node: Usage Tips,  Next: Config Options,  Prev: Usage,  Up: Top

3 Usage Tips
************

3.1 Input: CSV => Output: SVG
=============================

CSV spreadsheets can include SVG images, yet only the defs (gradients,
etc) and drawing data (paths, shapes, etc) are imported, _not the
header_.
This means that included images have to comply with the SVG XML used by
gnuclad.
If you think the current SVG header is missing something, please file a
bug detailing the problem.

   CSV spreadsheets can also include PNG images, but keep in mind that
raster images are encoded in base64 and may result in a really huge
output file.

3.2 Input: any => Output: CSV
=============================

All nodes with a starting date newer than endOfTime (usually the
current date) will be ignored.  All nodes with a stopping date newer or
the same as endOfTime will have their stopping date removed (unset ==
"still alive").

   For best results with CSV output, the recommended optimisation is 0
and treeMode conf setting is "lower inverse":
       optimise = 0
       treeMode = 2
   This way the trees will be grouped by children and sorted by date,
while your single nodes won't be mangled.

3.3 Optimisation - how it works
===============================

The optimisation parameter can be set to a value between 0 and 99.  0
turns off optimisation completely while 99 tries to stuff the resulting
image closely together.

   The first digit refers to the optimisation factor for isolated
nodes, those which are not part of the tree. The higher it is, the more
aggressively they will be appended to each other.  The second digit
sets the tree optimisation. Higher values will try to cramp the tree
together more than lower ones.

   The current mapping looks as follows (the exact parametrisation may
be subject to change).  Each higher scoring optimisation includes all
the lines above it in the same group.
     0   - off

     x1  - queue pairwise consecutive node lines; fast
     x3  - pull nodes to parent
     x6  - pull nodes towards root
     x8  - pull nodes towards root strongly


     1x  - inject single nodes among other single nodes in a greedy manner
         - don't pass over trees
     2x  - pass over trees of size <= 2
     3x  - pass over trees of size <= 3
     4x  - pass over trees of size <= 5
     5x  - pass over trees of size <= 10
     6x  - pass over trees of size <= 20
     7x  - pass over trees of size <= 50
     8x  - pass over any tree

3.4 Optimisation - additional info
==================================

The current optimisation is greedy and therefore not exactly stellar.

   For example, this optimises well:
                4 -> 2
     ___          ->  ___ ___ ___
             ___  ->      _______
         _______  ->
         ___      ->
   But a slightly different map doesn't (a human can easily reduce this
to 2):
                4 -> 3
     ___          ->  ___     ___
             ___  ->      _______
         _______  ->    _____
       _____      ->
   Sorting by start date (see config options) might help a bit.


File: gnuclad.info,  Node: Config Options,  Next: FAQ,  Prev: Usage Tips,  Up: Top

4 Config Options
****************

4.1 Default settings
====================

Every config option has a preset default which will be used if there is
no override.  In the same spirit, a default configuration will be used
if you specify no config file.

4.2 Generate a config file
==========================

You can always generate a full configuration file by specifying CONF as
gnuclad's output:

     gnuclad input.csv CONF
     gnuclad input.csv config-file.conf
     gnuclad input.csv conf another.conf
   The last line will use the settings as available from 'another.conf'
and complement them with the built-in defaults.  The 'input.csv' will
be ignored. It can be an empty dummy file.

4.3 Detail
==========

     # gnuclad config file

     # This configuration file has been generated by gnuclad 0.2.4

     # If you comment or delete an option,
     # gnuclad will use the built-in defaults.
     # Allowed syntax is:
     #   option=value
     #   option = value
     #   option= 'value'
     #   option ="value"
     #   option = three word value
     #   option = "three word value"
     #   ...


     # Show debug information when running gnuclad. (0 = off, 1 = on)
     debug = 0

     # Modify the appearance of your info box
     # To disable the box:
     # Set both font size parameters to 0, set the width and height to 0
     infoBoxTitle = Title
     infoBoxTitleSize = 18
     infoBoxText = Lorem ipsum dolor sit amet,
     infoBoxText = consectetuer adipiscing elit
     infoBoxTextSize = 12
     infoBoxFont = Liberation Sans, Arial, Helvetica
     infoBoxFontColor = #000
     infoBoxColor1 = #51b1f1
     infoBoxColor2 = #3181f1
     infoBoxX = 10
     infoBoxY = 45
     infoBoxWidth = 166
     infoBoxHeight = 60

     # Slice one node name with children, ignore the rest.
     slice =

     # Correction factor for font pixel width/height.
     # It is normalised for Liberation Sans (= Arial) and will
     # affect the alignment of all text in your output. Since this
     # one option affects all text instances, it's recommended
     # to use 'similarly spaced' fonts throughout your settings.
     fontCorrectionFactor = 1

     # Orientation of the timeline
     # 0 = left to right, 1 = top to bottom
     # 2 = right to left, 3 = bottom to top
     orientation = 0

     # The layout of the tree
     # 0 = branch to both sides
     # 1 = branch only on lower side
     # 2 = branch only on lower side, inverse (good for CSV output)
     treeMode = 0

     # Chose: 0 = don't presort, 1 = by name, 2 = by date
     sortKey = 0

     # Set optimisation between 0 and 99. See manual for details.
     # First digit: isolated nodes. Second digit: trees.
     optimise = 99

     # This guesses if optimisation should overlap in some rare cases
     # 1 = forbid overlaps, 0 = allow overlaps (better optimisation)
     strictOverlaps = 0

     # How much space (in offsets) to add before/after trees
     treeSpacing = 1

     # How big (total children) a tree has to be before it gets spaced
     treeSpacingBiggerThan = 5

     # Background color in hexadecimal RGB (#abc or #abcdef)
     mainBackground = #fff

     # Customise the background lines separating the years and months
     # rulerWidth is the width of a year line when a year label is present (see
     # yearLabelInterval below)
     # rulerUnlabeledYearWidth is the width of a year line without a year label.
     rulerWidth = 2
     rulerUnlabeledYearWidth = 2
     rulerColor = #ddd
     rulerMonthWidth = 1
     rulerMonthColor = #eee

     # Width of all node lines
     lineWidth = 2

     # Number of pixels between node lines (== 1 offset)
     offsetPX = 20

     # Set to 0 if you want 'dying' lines to stop abruptly
     stopFadeOutPX = 30

     # When optimising, gnuclad will inline nodes if possible. This sets
     # the minimum time distance between the stop of one node and the
     # start of another which will allow the latter to get appended.
     # Format: 'y.m.d' or 'y.m' or 'y' (year, month, day)
     stopSpacing = 0.2

     # How many pixels one year should have
     yearPX = 100

     # Customise the node labels
     labelFont = Liberation Sans, Arial, Helvetica
     labelFontSize = 16
     labelFontColor = #000

     # An experimental feature you might want to use with derivType > 1
     # Opacity takes values between 0 (transparent) and 100 (opaque).
     # It DOES NOT work flawlessly with SVG 1.1 output.
     # (hoping for v1.2 or CSS3 ...)
     labelBGOpacity = 0

     # This sets the heuristic used for determining label background width
     # 0 = standard, will sometimes generate suboptimal width values
     # 1 = improved, but only if the majority of your characters fall into
     #               the ASCII charset and you use a fairly standard font
     #               playing around with fontCorrectionFactor might help
     asciiStrings = 0

     # Useful if you want to use the renames only as version bumps.
     # 0 = rename above the dot to the right, like the first name
     # 1 = rename centered within the dot
     nameChangeType = 0

     # Set the way the lines should derive from the parent.
     # 0 = orthogonal, 1 = from parent's starting point
     # 2 = diagonal (45 degrees)
     # 3 = curved (1 year wide curves), 4 = curved (quadratic scaling)
     # 5 = curved (from parent's starting point)
     derivType = 0

     # The size of the node dots
     dotRadius = 10
     smallDotRadius = 5

     # Determines how the dots look.
     # 0 = full dots, 1 = circles
     # Circles might be useful together with nameChangeType = 1
     dotType = 0

     # Specifies the amount a node's line thickness should increase
     # relative to the count of it's children. (recommended 0.0 - 1.0)
     bigParent = 0

     # Adds small half-circles to connector starting points
     connectorDots = 1

     # 1 = connectors have a dashed stroke
     # 0 = connectors are full lines
     connectorsDashed = 1

     # Customise the year line encompassing the cladogram.
     yearLinePX = 40
     yearLineColor1 = #037
     yearLineColor2 = #37d
     yearLineFont = Liberation Sans, Arial, Helvetica
     yearLineFontSize = 28
     yearLineFontColor = #fff

     # How many (empty) years to append at the end
     appendYears = 0

     # How many (empty) years to prepend at the beginning
     prependYears = 0

     # How many years between year labels
     yearLabelInterval = 1

     # Remember to adjust your input data after changing these averages.
     daysInMonth = 30
     monthsInYear = 12

     # Not setting endOfTime will use the current date.
     #endOfTime = 2012.12

     # How the description field should be used.
     # 0 = ignore
     # 1 = weblink URL
     descriptionType = 0

     # When parsing direcories, show dot (hidden) files (0 = off, 1 = on)
     dir_showDotFiles = 0

     # Color of files, directories and links
     dir_colorFile = #0ff
     dir_colorDir = #00f
     dir_colorLink = #0f0

     # Directories with greater than specified size will get a domain of
     # the given intensity (0-100). Set size = 0 to turn off.
     dir_domainSize = 0
     dir_domainIntensity = 3


File: gnuclad.info,  Node: FAQ,  Next: Programming,  Prev: Config Options,  Up: Top

5 Frequently Asked Questions
****************************

*Are there any office spreadsheet editors that have trouble editing
standard CSV spreadsheets?*
Yes, a widely used non-POSIX office suite from 2007 has considerable
problems saving a CSV correctly.

   *Are there any browsers that don't support the SVG image format?*
SVG is supported by nearly any graphical browser available.  Notable
browsers incapable of rendering SVG include Dillo (all versions) and MS
Internet Explorer (all versions, can be remedied with plugins).


File: gnuclad.info,  Node: Programming,  Next: GNU Free Documentation License,  Prev: FAQ,  Up: Top

6 Programming
*************

Here's a small documentation if you wish to hack gnuclad.  Patches are
always welcome. New parsers/generators even more so!

* Menu:

* Classes::
* Helpers and Utilities::
* Configuration Options::
* Writing a parser::
* Writing a generator::


File: gnuclad.info,  Node: Classes,  Next: Helpers and Utilities,  Up: Programming



6.1 Classes
===========

A breakdown of the classes used in gnuclad.  Only the relevant public
parts are shown, first the members and then the constructors & methods.

The most important class is the *Cladogram*. It is instantiated by a
single object which describes the whole timeline and will be passed to
the parser/generator.  The Cladogram usually doesn't need to be
accessed by the *note parser: Writing a parser, except for the add***
functions.  The *note generator: Writing a generator. is meant to make
use of the data vectors.

     class Cladogram
       std::vector<Node *> nodes;
       std::vector<Connector *> connectors;
       std::vector<Domain *> domains;
       std::vector<Image *> includeSVG;
       std::vector<Image *> includePNG;

       Node * addNode(std::string tname);
       Domain * addDomain(std::string tname);
       Connector * addConnector();
       Image * addImage(std::string tname, std::vector<Image *> &vector);

   The cladogram also holds all *note configuration options:
Configuration Options, as well as *note additional functions: Helpers
and Utilities.

The second most important class, a single *Node*.  It should be
initialised only with the addNode() method:
       Node * Cladogram::addNode(std::string tname);
   The 'offset' is meant for the generator (it can be ignored by the
parser).
     class Node
       std::string name
       std::string parentName
       std::vector<NameChange> nameChanges;
       Date start;
       Date stop;
       Color color;
       std::string iconfile;
       std::string description;
       int offset;

       void addNameChange(std::string newName, Date date, std::string description);

A  *Color* object can be initialised either with RGB (1-255) or a hex
color value (#abc or #abcdef).  It will automatically convert and hold
the other value too.
     class Color
       int red;
       int green;
       int blue;
       std::string hex;

       Color(int tred, int tgreen, int tblue);
       Color(std::string thex);

The *Date* object can be initialised either with year,month,day or
year,month or year integer parameters; or with a string in the format
"y.m.d" or "y.m" or "y", where the letters can be arbitrary (also
negative) integers.
The monthset/dayset switches tell the generator to honor the month and
day settings, and should be ignored by the parser.
     class Date
       int year;
       int month;
       int day;

       bool monthset;
       bool dayset;

       Date(int tyear, int tmonth, int tday);
       Date(int tyear, int tmonth);
       Date(int tyear);
       Date(const std::string str);

       bool operator<(const Date d);
       bool operator==(Date d);
       Date operator+(const Date d);

The *Image* object is to be initialised only with addImage() in the
parser:
       Image * Cladogram::addImage(std::string tname, std::vector<Image *> &vector);
   The parser has to specify the vector it wants the image to be loaded
into (see the Cladogram class below for details).  It is usually passed
to the generator unchanged and contains three members.
     class Image
       std::string filename;
       int x;
       int y;

The *NameChange* is to be initialised only with addNameChange() in the
parser:
       void Node::addNameChange(std::string newName, Date date,
                                std::string description);
   The generator can access the nameChanges vector of the Node, making
use of the three members.
     class NameChange
       std::string newName;
       Date date;
       std::string description;

The *Domain* is to be initialised only with addDomain() in the parser:
       Domain * Cladogram::addDomain(std::string tname);
   The 'offsetA' and 'offsetB' are meant for the generator (they can be
ignored by the parser).
     class Domain
       std::string nodeName;
       Color color;
       int intensity;
       int offsetA;
       int offsetB;

The *Connector* is to be initialised only with addConnector() in the
parser:
       Connector * Cladogram::addConnector();
   The 'offsetA' and 'offsetB' are meant for the generator (they can be
ignored by the parser).
     class Connector
       std::string fromName;
       std::string toName;
       Date fromWhen;
       Date toWhen;
       int thickness;
       Color color;
       int offsetA;
       int offsetB;

The *InputFile* serves as a container to pass data to the parser.
     class InputFile:
       std::ifstream * p;
       std::string name;

       InputFile(std::string tname);
       ~InputFile();


File: gnuclad.info,  Node: Helpers and Utilities,  Next: Configuration Options,  Prev: Classes,  Up: Programming



6.2 Additional Cladogram functions
==================================

The *note Cladogram class: Classes. holds all the data and configuration
settings, but also a few additional resources.

   The following can be directly accessed for general information.
     std::string gnuclad_version;
     std::string inputFolder;

     int maximumOffset;
     Date beginningOfTime;

   These are meant to be set by the *note parser: Writing a parser. if
needed:
     bool truncateFolder;    // Use only base name of child after parent assignment
     bool inVitro;           // Don't warn if child starts after parent stops
     bool tighterDomains;    // Tighten domains to expand just half as far

   The following method (usually executed with clad->nodesPreorder())
will change the order of the nodes vector such that every parent will
occur after all it's children, topologically sorted. This is useful for
preventing line overlaps in SVG output.
     void nodesPreorder();

6.3 Helper functions
====================

Here's an additional list of small helpers you can get when including
'gnuclad.h'.  This is meant as a quick overview. For descriptions, take
a look at the 'gnuclad-helpers.cpp' source file.

   void pressEnter();

   std::string strToLower(std::string str);

   std::string getBaseName(std::string fname);

   std::string getExt(std::string fname);

   std::ifstream * new_infile(const std::string fname);

   std::ofstream * new_outfile(const std::string fname);

   void safeClose(std::ifstream * fp);

   void safeClose(std::ofstream * fp);

   void explode(const std::string str, const char delimiter,
 std::vector<std::string> * v);

   void explodeSafely(const std::string str, const char delimiter,
             const char toggle, std::vector<std::string> * v);

   std::string findReplace(std::string str, std::string find,
std::string replace);

   double str2double(const std::string str);

   int str2int(const std::string s);

   std::string int2str(const int n);

   std::string base64_encode(const char * raw, unsigned int len);

   Date currentDate();

   std::string Date2str(Date date);

   int datePX(Date d, const Cladogram * clad);


File: gnuclad.info,  Node: Configuration Options,  Next: Writing a parser,  Prev: Helpers and Utilities,  Up: Programming



6.4 Adding configuration options
================================

When adding a configuration option, be sure to implement it at least in
the following places:
   * src/gnuclad.h: members of the Cladogram class (declaration)

   * src/gnuclad-cladogram.cpp: in the constructor of the Cladogram
     object                                  (initialisation / default
     setting)

   * src/gnuclad-cladogram.cpp: in the parseOptions function

   * src/generator/conf.cpp: output and description of the new option

   * doc/src/gnuclad-config.texi: at the bottom, insert the new config
     file                                    created by using 'conf' as
     output

   * third party gnuclad configuration files you have access to

6.5 Using configuration options
===============================

The options are usually read by a separate configuration parser, but
can be modified by the data input parser if necessary and should be
implemented by the generator as completely as possible.  The option
names in the config file are identical to the variable names and can be
accessed via the cladogram pointer:
     int myTextSize = clad->labelFontSize;
     clad->monthsInYear = 10;

   For a detailed overview and explanations, consult the *note Config
Options: Config Options. chapter.

   Also opening the 'gnuclad.h' header file and searching for CONFIG
OPTIONS will take you straight to the declarations.


File: gnuclad.info,  Node: Writing a parser,  Next: Writing a generator,  Prev: Configuration Options,  Up: Programming



6.6 Adding a parser
===================

Steps neccessary to add a parser.  XXX refers to the input format you
want to implement.

   src/parser/XXX.h:
     #include "../gnuclad.h"
     derive class from Parser:
       class ParserXXX: public Parser
     declare constructor and destructor
     declare public method:
       void parseData(Cladogram * clad, InputFile & in);

   src/parser/XXX.cpp:
     #include "XXX.h"
     implement constructor and destructor
     implement parseData(Cladogram * clad, InputFile & in) { ... }

   src/gnuclad.cpp:
     #include "parser/XXX.h"
     update inFormats
     add choser:
       else if(inputExt == "XXX") parser = new ParserXXX;

   src/Makefile.am:
     add to SOURCES: parser/XXX.h parser/XXX.cpp

6.7 How to write a parser
=========================

Your parser is called only by this function:
       parser->parseData(Cladogram * clad, InputFile & in);

   Therefore it should implement the following one:
       void ParserXXX::parseData(Cladogram * clad, InputFile & in) { ... }

   The InputFile object holds a correctly opened input file. It also
holds the file name in case your parser needs it. You can use the
object like this:
       ifstream * fp = in.p;
       // or
       ifstream & f = *(in.p);
       // or
       ifstream myfp(in.name);

   The cladogram pointer is an empty Cladogram object that you have to
fill.  You should try to fill as much of it as possible in order to
increase the information pool for the output generator. Note that not
all generators will make use of every piece of data, and it all depends
on the options the user has set; the more information the better.

   If you cannot fill a field, leave it empty and the generators will
ignore it.  All measures (height, thickness, ...) are "generic units".

   Objects created with the add*** functions will be allocated and
later deleted automatically.  It is important to use those functions
for objects you wish to pass on to the generator.

Adding a Node:
     #include "../gnuclad.h"
     #include "parserXXX.h"
     void ParserXXX::parseData(Cladogram * clad, InputFile & in) {

       Node * n = clad->addNode("MyFirstNode");
       n->color = Color("#a2b3c4");
       n->parentName = "";
       n->start =  Date(1993,8,1);
       n->stop = Date("2000.3");
       n->iconfile = "";
       n->description = "it rocks!";
       n->addNameChange("NewName", Date(1999,2,0), "it still rocks!")

     }

Adding a Connector (note that fromName and toName are expected to be
existing Node names at the end of the parser routine - you'll get an
error otherwise):
       Connector * c = clad->addConnector();
       c->fromWhen = Date(1997,0,0);
       c->fromName = "MyFirstNode";
       c->toWhen = Date("1997.5.1");
       c->toName = "MySecondNode";
       c->thickness = 3;
       c->color = Color(12,255,0);

Adding a domain (note that the initialising name is expected to be an
existing Node name at the end of the parser routine - you'll get an
error otherwise):
       Domain * d = clad->addDomain("MyFirstNode");
       d->color = Color("#abc");
       d->intensity = 15;

Adding an image (currently supported: SVG and PNG):
       Image * image = clad->addImage("picture.svg", clad->includeSVG);
       image->x = 100;
       image->y = 50;

       Image * image = clad->addImage("somewhere/picture.png", clad->includePNG);
       image->x = 10;
       image->y = 500;


File: gnuclad.info,  Node: Writing a generator,  Prev: Writing a parser,  Up: Programming



6.8 Adding a generator
======================

Steps neccessary to add a generator.  XXX refers to the output format
you want to implement.

   src/generator/XXX.h:
     #include "../gnuclad.h"
     derive class from generator:
       class GeneratorXXX: public Generator
     declare constructor and destructor
     declare public method:
       void writeData(Cladogram * clad, OutputFile & out);

   src/generator/XXX.cpp:
     #include "XXX.h"
     implement constructor and destructor
     implement writeData(Cladogram * clad, OutputFile & out) { ... }

   src/gnuclad.cpp:
     #include "generator/XXX.h"
     update outFormats
     add choser:
       else if(outputExt == "XXX") generator = new GeneratorXXX;

   src/Makefile.am:
     add to SOURCES: generator/XXX.h generator/XXX.cpp

6.9 How to write a generator
============================

Your generator is called only by this function:
       generator->writeData(Cladogram * clad, OutputFile & out);

   Therefore it should implement the following one:
       void generatorXXX::writeData(Cladogram * clad, OutputFile & out) { ... }

   The OutputFile object holds a correctly opened output file. It also
holds the file name in case your generator needs it. You can use the
object like this:
       ofstream * fp = out.p;
       // or
       ofstream & f = *(out.p);
       // or
       ofstream myfp(out.name);

   You should try to utilise as much information from the Cladogram as
possible.  This can be done by iterating over its data vectors:
     vector<Node *> nodes
     vector<Connector *> connectors
     vector<Domain *> domains
     vector<Image *> includeSVG
     vector<Image *> includePNG

   Additionally, you should strive to make use of all *note
configuration options: Configuration Options. the Cladogram contains.

   If a variable is empty, try to handle it as gracefully as possible.
All measures (height, thickness, ...) are "generic units".

   Example:
     #include "../gnuclad.h"
     #include "generatorXXX.h"
     #include <iostream>
     void generatorXXX::writeData(Cladogram * clad, OutputFile & out) {

       Node * n;
       for(int i = 0; i < (int)clad->nodes.size(); ++i) {

         n = clad->nodes[i];
         std::cout << "\nWe have " << n->name
                   << " at offset " << n->offset;

       }

       std::cout << "\n\nOur end of time is "
                 << Date2str(clad->endOfTime) << "\n";

       std::cout << "\n\nOur background color (in hex) is "
                 << clad->mainBackground.hex << "\n";

     }


File: gnuclad.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: Programming,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, receipt of a copy of some or all of
     the same material does not give you any rights to use it.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.  If the Document specifies that a proxy
     can decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

 11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: gnuclad.info,  Node: Index,  Prev: GNU Free Documentation License,  Up: Top

Index
*****

 [index ]
* Menu:

* Detailed configuration options:        Config Options.       (line 26)
* FAQ:                                   FAQ.                  (line  6)
* Getting Started:                       Usage.                (line 28)

 [index ]
* Menu:

* Additional Cladogram functions:        Helpers and Utilities.
                                                               (line  5)
* Classes:                               Classes.              (line  5)
* Helper functions:                      Helpers and Utilities.
                                                               (line 30)



Tag Table:
Node: Top604
Node: About1047
Node: Usage1919
Node: Usage Tips3632
Node: Config Options6725
Node: FAQ13980
Node: Programming14600
Node: Classes14976
Node: Helpers and Utilities19591
Node: Configuration Options21879
Node: Writing a parser23420
Node: Writing a generator26961
Node: GNU Free Documentation License29596
Node: Index54762

End Tag Table
